import categories.types
import homotopy_theory.formal.i_category.homotopy_classes
import homotopy_theory.formal.i_category.drag

import .disk_sphere
import .i_category
import .pointed

noncomputable theory

open categories
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace homotopy_theory.topological_spaces
open homotopy_theory.cofibrations
open homotopy_theory.cylinder
open Top
local notation `Top` := Top.{0}
local notation `Set` := Type.{0}

local notation `[` A `, ` X `]` := homotopy_classes A X

-- We define œÄ‚ÇÄ(X) as the set of homotopy classes of maps from a point
-- to X. œÄ‚ÇÄ is a functor from Top to Set, namely the functor
-- corepresented on the homotopy category by *.

def œÄ‚ÇÄ : Top ‚Üù Set :=
{ onObjects := Œª X, [*, X], onMorphisms := Œª X Y f x, ‚ü¶f‚üß ‚àò x }

-- We define œÄ‚Çô(X, x) as the set of homotopy classes of maps D[n] ‚Üí X
-- which send S[n-1] to x, rel S[n-1].

def œÄ_ (n : ‚Ñï) (X : Top) (x : X) : Set :=
homotopy_classes_extending_rel (sphere_disk_incl n) (sphere_disk_cofibration n) (Top.const x)

def œÄ_induced (n : ‚Ñï) {X Y : Top} (x : X) (f : X ‚ü∂ Y) : œÄ_ n X x ‚ü∂ œÄ_ n Y (f x) :=
hcer_induced f

-- Non-Top_ptd-aware versions of functoriality.
--
-- This should really be an application of a lemma `hcer_induced_id`,
-- but writing down the type of that lemma is more annoying than just
-- writing the one-line proof here.
lemma œÄ_induced_id (n : ‚Ñï) {X : Top} (x : X) : œÄ_induced n x (ùüô X) = id :=
by funext a; induction a using quot.ind; change ‚ü¶_‚üß = _; simp; refl

-- Similarly.
lemma œÄ_induced_comp (n : ‚Ñï) {X Y Z : Top} (x : X) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  œÄ_induced n x (g ‚àò f) = œÄ_induced n (f x) g ‚àò œÄ_induced n x f :=
by funext a; induction a using quot.ind; change ‚ü¶_‚üß = ‚ü¶_‚üß; simp; refl

def œÄ (n : ‚Ñï) : Top_ptd ‚Üù Set :=
{ onObjects := Œª Xx, œÄ_ n Xx.space Xx.pt,
  onMorphisms := Œª Xx Yy f,
    by convert œÄ_induced n Xx.pt f.val; rw f.property,
  identities := assume Xx, œÄ_induced_id n Xx.pt,
  functoriality := assume Xx Yy Zz f g, begin
    -- This is tricky because the action of œÄ on a morphism f involves
    -- recursion on the equality `f.property` : f x = y. We need to
    -- arrange for z and then y to be "free", i.e., not mentioned
    -- earlier in the context, so that we can match on the equality
    -- proofs using `subst`.
    rcases Xx with ‚ü®X, x‚ü©,
    rcases Yy with ‚ü®Y, y‚ü©,
    rcases Zz with ‚ü®Z, z‚ü©,
    rcases g with ‚ü®g, hg‚ü©, change Y ‚ü∂ Z at g, change g y = z at hg,
    rcases f with ‚ü®f, hf‚ü©, change X ‚ü∂ Y at f, change f x = y at hf,
    subst z, subst y,
    -- Now we can apply the simple version
    exact œÄ_induced_comp n x f g
  end }

-- Change-of-basepoint maps.

def path {X : Top} (x x' : X) : Type := homotopy (Top.const x : * ‚ü∂ X) (Top.const x' : * ‚ü∂ X)

def path.induced {X Y : Top} (f : X ‚ü∂ Y) {x x' : X} (Œ≥ : path x x') : path (f x) (f x') :=
Œ≥.congr_left f

-- TODO: Move this
def iso_of_equiv {X Y : Set} (e : X ‚âÉ Y) : X ‚âÖ Y :=
{ morphism := e.to_fun,
  inverse := e.inv_fun,
  witness_1 := funext e.left_inv,
  witness_2 := funext e.right_inv }

def change_of_basepoint (n : ‚Ñï) {X : Top} {x x' : X} (Œ≥ : path x x') : œÄ_ n X x ‚âÖ œÄ_ n X x' :=
iso_of_equiv $ drag_equiv (Œ≥.congr_right S[n-1].point_induced)

lemma change_of_basepoint_induced (n : ‚Ñï) {X Y : Top} {x x' : X} (Œ≥ : path x x') (f : X ‚ü∂ Y) :
  œÄ_induced n x' f ‚àò (change_of_basepoint n Œ≥).morphism =
  (change_of_basepoint n (Œ≥.induced f)).morphism ‚àò œÄ_induced n x f :=
funext $ drag_equiv_induced _ _

end homotopy_theory.topological_spaces
